"use client";

import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { MessageCircle, X } from "lucide-react";

export default function ChatAssistant() {
  const [open, setOpen] = useState(false);
  const [lang, setLang] = useState("en"); // default English
  const [messages, setMessages] = useState([
    { sender: "bot", text: "üëã Hi! I‚Äôm your ‡§ñ‡•á‡§§‡•Ä ‡§Æ‡§ø‡§§‡•ç‡§∞. How can I help?" },
  ]);
  const [input, setInput] = useState("");

  const toggleChat = () => setOpen(!open);

  // Crop requirements database
  const cropData = {
    rice: {
      en: " Rice grows best in clay or loamy soil with high fertility, pH 5.5‚Äì6.5, and requires plenty of water.",
      hi: " ‡§ß‡§æ‡§® ‡§ó‡§π‡§∞‡•Ä ‡§ö‡§ø‡§ï‡§®‡•Ä ‡§Ø‡§æ ‡§¶‡•ã‡§Æ‡§ü ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§â‡§ó‡§§‡§æ ‡§π‡•à, pH 5.5‚Äì6.5 ‡§î‡§∞ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§™‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§",
    },
    wheat: {
      en: " Wheat prefers well-drained loamy soil with pH 6‚Äì7.5 and cool climate.",
      hi: " ‡§ó‡•á‡§π‡•Ç‡§Ç ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§ú‡§≤ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§µ‡§æ‡§≤‡•Ä ‡§¶‡•ã‡§Æ‡§ü ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§â‡§ó‡§§‡§æ ‡§π‡•à, pH 6‚Äì7.5 ‡§î‡§∞ ‡§†‡§Ç‡§°‡•Ä ‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§",
    },
    maize: {
      en: " Maize requires fertile, well-drained loamy soil with pH 5.5‚Äì7.0 and warm climate.",
      hi: "‡§Æ‡§ï‡•ç‡§ï‡§æ ‡§â‡§™‡§ú‡§æ‡§ä, ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§ú‡§≤ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§µ‡§æ‡§≤‡•Ä ‡§¶‡•ã‡§Æ‡§ü ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§â‡§ó‡§§‡§æ ‡§π‡•à, pH 5.5‚Äì7.0 ‡§î‡§∞ ‡§ó‡§∞‡•ç‡§Æ ‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§",
    },
  };

  const handleSend = (e) => {
    e.preventDefault();
    if (!input.trim()) return;

    const userMessage = { sender: "user", text: input };
    setMessages((prev) => [...prev, userMessage]);

    let botReply =
      lang === "en"
        ? " Sorry, I didn‚Äôt understand. Try asking about crops or weather."
        : " ‡§Æ‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç, ‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§™‡§æ‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§Ø‡§æ ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§";

    const lower = input.toLowerCase();

    // Check crop requirements
    if (cropData.rice && lower.includes("rice")) botReply = cropData.rice[lang];
    if (cropData.wheat && lower.includes("wheat")) botReply = cropData.wheat[lang];
    if (cropData.maize && lower.includes("maize")) botReply = cropData.maize[lang];

    // English responses
    if (lang === "en") {
      if (lower.includes("hello")) botReply = " Hello! How are you?";
      if (lower.includes("recommend")) botReply = " You can get crop recommendations by filling the form above.";
      if (lower.includes("weather")) botReply = " Weather data will be fetched automatically based on your location.";
    }

    // Hindi responses
    if (lang === "hi") {
      if (lower.includes("hello") || lower.includes("‡§®‡§Æ‡§∏‡•ç‡§§‡•á")) botReply = " ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Ü‡§™ ‡§ï‡•à‡§∏‡•á ‡§π‡•à‡§Ç?";
      if (lower.includes("recommend") || lower.includes("‡§∏‡•Å‡§ù‡§æ‡§µ")) botReply = " ‡§Ü‡§™ ‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§ä‡§™‡§∞ ‡§µ‡§æ‡§≤‡•á ‡§´‡•â‡§∞‡•ç‡§Æ ‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§";
      if (lower.includes("weather") || lower.includes("‡§Æ‡•å‡§∏‡§Æ")) botReply = " ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡§æ ‡§°‡•á‡§ü‡§æ ‡§Ü‡§™‡§ï‡•á ‡§∏‡•ç‡§•‡§æ‡§® ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§∏‡•ç‡§µ‡§§‡§É ‡§≤‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§";
    }

    setMessages((prev) => [...prev, { sender: "bot", text: botReply }]);
    setInput("");
  };

  const switchLang = (language) => {
    setLang(language);
    setMessages([
      {
        sender: "bot",
        text:
          language === "en"
            ? "üëã Hi! I‚Äôm your ‡§ñ‡•á‡§§‡•Ä ‡§Æ‡§ø‡§§‡•ç‡§∞. How can I help?"
            : "üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§ñ‡•á‡§§‡•Ä ‡§Æ‡§ø‡§§‡•ç‡§∞ ‡§π‡•Ç‡§Å, ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•Ç‡§Å‡•§",
      },
    ]);
  };

  return (
    <div className="fixed bottom-4 right-4 z-50">
      {/* Chat Toggle Button */}
      {!open && (
        <motion.button
          onClick={toggleChat}
          className="bg-green-600 text-white p-4 rounded-full shadow-lg hover:bg-green-700"
          whileHover={{ scale: 1.1 }}
        >
          <MessageCircle size={24} />
        </motion.button>
      )}

      {/* Chat Box */}
      <AnimatePresence>
        {open && (
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 50 }}
            className="w-80 h-96 bg-white shadow-2xl rounded-lg flex flex-col"
          >
            {/* Header with language toggle */}
            <div className="bg-green-600 text-white p-3 flex justify-between items-center rounded-t-lg">
              <span>‡§ñ‡•á‡§§‡•Ä ‡§Æ‡§ø‡§§‡•ç‡§∞</span>
              <div className="flex items-center gap-2">
                <button
                  onClick={() => switchLang("en")}
                  className={`px-2 py-1 rounded text-sm ${
                    lang === "en" ? "bg-white text-green-700" : "bg-green-700 text-white"
                  }`}
                >
                  EN
                </button>
                <button
                  onClick={() => switchLang("hi")}
                  className={`px-2 py-1 rounded text-sm ${
                    lang === "hi" ? "bg-white text-green-700" : "bg-green-700 text-white"
                  }`}
                >
                  HI
                </button>
                <button onClick={toggleChat}>
                  <X size={20} />
                </button>
              </div>
            </div>

            {/* Messages */}
            <div className="flex-1 p-3 overflow-y-auto space-y-2 text-sm">
              {messages.map((msg, i) => (
                <div
                  key={i}
                  className={`p-2 rounded-lg max-w-[80%] ${
                    msg.sender === "bot"
                      ? "bg-green-100 text-green-900 self-start"
                      : "bg-green-600 text-white self-end ml-auto"
                  }`}
                >
                  {msg.text}
                </div>
              ))}
            </div>

            {/* Input */}
            <form onSubmit={handleSend} className="p-3 flex gap-2 border-t">
              <input
                value={input}
                onChange={(e) => setInput(e.target.value)}
                className="flex-1 p-2 border rounded"
                placeholder={lang === "en" ? "Type a message..." : "‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≤‡§ø‡§ñ‡•á‡§Ç..."}
              />
              <button
                type="submit"
                className="bg-green-600 text-white px-3 rounded hover:bg-green-700"
              >
                {lang === "en" ? "Send" : "‡§≠‡•á‡§ú‡•á‡§Ç"}
              </button>
            </form>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
